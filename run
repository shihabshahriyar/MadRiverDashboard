#!/usr/bin/env python3

import json
import os
import os.path
import argparse
import subprocess
import random
import string
import textwrap

PROJECT_NAME = 'fsjs'
DEFAULT_PORT = 8000
BUILD_PATH = 'build'
NEXT_ENABLED = True
EXPRESS_ENABLED = True
MONGO_ENABLED = True
WORKER_ENABLED = True
CERTBOT_EMAIL = 'certbot-notifications@tk.co'

def main():
  global args, config

  proj_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

  parser = argparse.ArgumentParser(description='run or deploy the application')

  parser.add_argument('config', type=str,
                      help='config filename')
  parser.add_argument('command', type=str, nargs='?', default=None,
                      help='command to run -- can be: fg, bg, stop, deploy, cli')

  args = parser.parse_args()

  with open(args.config) as config_f:
    config = json.load(config_f)

  os.chdir(proj_dir)

  if not os.path.exists(BUILD_PATH):
    os.mkdir(BUILD_PATH)

  parse_config()

  print(f'docker-compose command: {compose_command}')

  config_nginx()

  if command == 'fg':
    docker_down()
    docker_build()
    docker_compose_call(['up', '--remove-orphans'])
  elif command == 'bg':
    docker_down()
    docker_build()
    docker_compose_call(['up', '-d', '--remove-orphans'])
  elif command == 'stop':
    docker_down()
  elif command == 'cli':
    docker_down()
    docker_build()
    docker_compose_call(['run', 'server', 'node'])
  elif command == 'install':
    service_config = textwrap.dedent(f'''
      [Service]
      User=root
      WorkingDirectory={proj_dir}
      ExecStart={proj_dir}/run {args.config} fg
      ExecStop={proj_dir}/run {args.config} stop
      Restart=on-failure
      RestartSec=5

      [Unit]
      Description={PROJECT_NAME}
      Requires=docker.service
      After=docker.service
      StartLimitIntervalSec=300
      StartLimitBurst=10

      [Install]
      WantedBy=multi-user.target
    ''')
    with open(f'/etc/systemd/system/{PROJECT_NAME}.service', 'w') as f:
      f.write(service_config)

    run([
      'bash', '-c',
      textwrap.dedent(f'''
        systemctl daemon-reload
        systemctl restart {PROJECT_NAME}
      ''')
    ])
  elif command in ['deploy', 'fg-remote']:
    if not host:
      raise Exception('host must be specified for deploy')

    run([
      'rsync',
      '-av',
      '--delete-after',
      '--exclude',
      '.git',
      '--include',
      '/package.json',
      '--include',
      '/package-lock.json',
      '--exclude',
      '/*.json',
      '--exclude',
      'node_modules',
      '--exclude',
      'build',
      '--exclude',
      '.vscode',
      '--exclude',
      '.next',
      './',
      f'root@{host}:/opt/{PROJECT_NAME}/',
    ])

    run([
      'rsync',
      '-av',
      args.config,
      f'root@{host}:/opt/{PROJECT_NAME}/',
    ])

    if command == 'fg-remote':
      cmd = 'fg'
    else:
      cmd = 'install'

    run([
      'ssh',
      f'root@{host}',
      f'''
        if ! which dockerd; then
          curl -fsSL https://get.docker.com | bash
        fi
        if ! which docker-compose; then
          curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
        fi
        /opt/{PROJECT_NAME}/run /opt/{PROJECT_NAME}/{args.config} {cmd}
      ''',
    ])
  else:
    raise Exception(f'unknown command: {command}')

def run(cmd):
  subprocess.run(cmd, check=True)

def docker_compose_call(args):
  cmd = compose_command + args
  print(f'docker_compose_call: {cmd}')
  run(cmd)

def docker_down():
  docker_compose_call(['down', '--remove-orphans'])

def docker_build():
  docker_compose_call(['build'])

def parse_config():
  global use_ssl, local, port, develop, admin_password, domain, compose_command, mongo_express_enabled, host, command

  if args.command:
    command = args.command
  else:
    command = config.get('command')
    if not command:
      raise Exception('command required as CLI argument or in config file')

  compose_command = ['docker-compose', '-p', PROJECT_NAME]

  def add_compose_config(fn):
    compose_command.append('-f')
    compose_command.append(os.path.join('docker-compose', f'{fn}.yml'))

  add_compose_config('main')

  if NEXT_ENABLED:
    add_compose_config('next')

  if EXPRESS_ENABLED:
    add_compose_config('express')

  if WORKER_ENABLED:
    add_compose_config('worker')

  if MONGO_ENABLED:
    add_compose_config('mongo')

  mongo_express_enabled = config.get('mongo_express_enabled', False)
  if mongo_express_enabled:
    add_compose_config('mongo-express')

  develop = config.get('develop', False)
  if NEXT_ENABLED and develop:
    add_compose_config('next-develop')

  host = config.get('host')
  domain = config.get('domain', host)
  if domain:
    use_ssl = True
    add_compose_config('with-ssl')
  else:
    use_ssl = False
    add_compose_config('without-ssl')
    local = config.get('local', True)
    port = config.get('port', DEFAULT_PORT)
  admin_password = config.get('admin_password')
  if admin_password is None:
    admin_password = random_password()
    print(f'admin_password - randomly generated for this build: {admin_password}')
  assert admin_password

def random_password():
  rand = random.SystemRandom()
  chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
  return ''.join(random.choice(chars) for _ in range(32))

def config_nginx():
  app_part = textwrap.dedent(f'''
    client_max_body_size 500M;
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml;
    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;
    send_timeout                300;
  ''')

  if NEXT_ENABLED:
    app_part += textwrap.dedent(f'''
      location / {{
        proxy_pass http://next:8001/;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if EXPRESS_ENABLED:
    app_part += textwrap.dedent(f'''
      location /express/ {{
        proxy_pass http://express:8002/;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if mongo_express_enabled:
    app_part += textwrap.dedent(f'''
      location /mongo-express/ {{
        proxy_pass http://mongo-express:8081/mongo-express/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if use_ssl:
    nginx_config = textwrap.dedent(f'''
      server {{
        server_name {domain};

        listen 80;

        return 301 https://{domain}$request_uri;
      }}

      server {{
        server_name {domain};

        listen 443 ssl http2;

        {app_part}

        ssl_certificate /etc/letsencrypt/live/{domain}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{domain}/privkey.pem;
      }}
    ''')
  else:
    nginx_config = textwrap.dedent(f'''
      server {{
        server_name app;

        listen 8000;

        {app_part}
      }}
    ''')

  with open(os.path.join('build', 'nginx-app.conf'), 'w') as f:
    f.write(nginx_config)

  nginx_env = textwrap.dedent(f'''
    USE_SSL={'true' if use_ssl else 'false'}
    CERTBOT_DOMAIN={domain}
    CERTBOT_EMAIL={CERTBOT_EMAIL}
  ''')
  with open(os.path.join('build', 'nginx.env'), 'w') as f:
    f.write(nginx_env)

  with open(os.path.join('build', 'nginx-admin-password.txt'), 'w') as f:
    f.write(admin_password)


if __name__ == '__main__':
  main()
